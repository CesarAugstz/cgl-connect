/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, MQTTConfig } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateMQTTConfig(options?: Omit<(UseMutationOptions<(MQTTConfig | undefined), DefaultError, Prisma.MQTTConfigCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MQTTConfigCreateArgs, DefaultError, MQTTConfig, true>('MQTTConfig', 'POST', `${endpoint}/mQTTConfig/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MQTTConfigCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MQTTConfigCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MQTTConfig, Prisma.MQTTConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MQTTConfigCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MQTTConfig, Prisma.MQTTConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyMQTTConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MQTTConfigCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MQTTConfigCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('MQTTConfig', 'POST', `${endpoint}/mQTTConfig/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MQTTConfigCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MQTTConfigCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MQTTConfigCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyMQTTConfig<TArgs extends Prisma.MQTTConfigFindManyArgs, TQueryFnData = Array<Prisma.MQTTConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MQTTConfigFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/findMany`, args, options, fetch);
}

export function useInfiniteFindManyMQTTConfig<TArgs extends Prisma.MQTTConfigFindManyArgs, TQueryFnData = Array<Prisma.MQTTConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MQTTConfigFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/findMany`, args, options, fetch);
}

export function useSuspenseFindManyMQTTConfig<TArgs extends Prisma.MQTTConfigFindManyArgs, TQueryFnData = Array<Prisma.MQTTConfigGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MQTTConfigFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyMQTTConfig<TArgs extends Prisma.MQTTConfigFindManyArgs, TQueryFnData = Array<Prisma.MQTTConfigGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MQTTConfigFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/findMany`, args, options, fetch);
}

export function useFindUniqueMQTTConfig<TArgs extends Prisma.MQTTConfigFindUniqueArgs, TQueryFnData = Prisma.MQTTConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MQTTConfigFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueMQTTConfig<TArgs extends Prisma.MQTTConfigFindUniqueArgs, TQueryFnData = Prisma.MQTTConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MQTTConfigFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/findUnique`, args, options, fetch);
}

export function useFindFirstMQTTConfig<TArgs extends Prisma.MQTTConfigFindFirstArgs, TQueryFnData = Prisma.MQTTConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MQTTConfigFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstMQTTConfig<TArgs extends Prisma.MQTTConfigFindFirstArgs, TQueryFnData = Prisma.MQTTConfigGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MQTTConfigFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/findFirst`, args, options, fetch);
}

export function useUpdateMQTTConfig(options?: Omit<(UseMutationOptions<(MQTTConfig | undefined), DefaultError, Prisma.MQTTConfigUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MQTTConfigUpdateArgs, DefaultError, MQTTConfig, true>('MQTTConfig', 'PUT', `${endpoint}/mQTTConfig/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MQTTConfigUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MQTTConfigUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MQTTConfig, Prisma.MQTTConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MQTTConfigUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MQTTConfig, Prisma.MQTTConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyMQTTConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MQTTConfigUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MQTTConfigUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('MQTTConfig', 'PUT', `${endpoint}/mQTTConfig/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MQTTConfigUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MQTTConfigUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MQTTConfigUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertMQTTConfig(options?: Omit<(UseMutationOptions<(MQTTConfig | undefined), DefaultError, Prisma.MQTTConfigUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MQTTConfigUpsertArgs, DefaultError, MQTTConfig, true>('MQTTConfig', 'POST', `${endpoint}/mQTTConfig/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MQTTConfigUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.MQTTConfigUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MQTTConfig, Prisma.MQTTConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MQTTConfigUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MQTTConfig, Prisma.MQTTConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteMQTTConfig(options?: Omit<(UseMutationOptions<(MQTTConfig | undefined), DefaultError, Prisma.MQTTConfigDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MQTTConfigDeleteArgs, DefaultError, MQTTConfig, true>('MQTTConfig', 'DELETE', `${endpoint}/mQTTConfig/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MQTTConfigDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.MQTTConfigDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MQTTConfig, Prisma.MQTTConfigGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MQTTConfigDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MQTTConfig, Prisma.MQTTConfigGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyMQTTConfig(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MQTTConfigDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MQTTConfigDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('MQTTConfig', 'DELETE', `${endpoint}/mQTTConfig/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MQTTConfigDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MQTTConfigDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MQTTConfigDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateMQTTConfig<TArgs extends Prisma.MQTTConfigAggregateArgs, TQueryFnData = Prisma.GetMQTTConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MQTTConfigAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateMQTTConfig<TArgs extends Prisma.MQTTConfigAggregateArgs, TQueryFnData = Prisma.GetMQTTConfigAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MQTTConfigAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/aggregate`, args, options, fetch);
}

export function useGroupByMQTTConfig<TArgs extends Prisma.MQTTConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MQTTConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.MQTTConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MQTTConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.MQTTConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.MQTTConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.MQTTConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MQTTConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByMQTTConfig<TArgs extends Prisma.MQTTConfigGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MQTTConfigGroupByArgs['orderBy'] } : { orderBy?: Prisma.MQTTConfigGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MQTTConfigGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.MQTTConfigGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.MQTTConfigGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.MQTTConfigGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MQTTConfigGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/groupBy`, args, options, fetch);
}

export function useCountMQTTConfig<TArgs extends Prisma.MQTTConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MQTTConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MQTTConfigCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/count`, args, options, fetch);
}

export function useSuspenseCountMQTTConfig<TArgs extends Prisma.MQTTConfigCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MQTTConfigCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MQTTConfigCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MQTTConfig', `${endpoint}/mQTTConfig/count`, args, options, fetch);
}

export function useCheckMQTTConfig<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; deviceId?: string; topicPrefix?: string; listenTopics?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('MQTTConfig', `${endpoint}/mQTTConfig/check`, args, options, fetch);
}
