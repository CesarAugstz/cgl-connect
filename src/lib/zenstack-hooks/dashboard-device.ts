/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, DashboardDevice } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateDashboardDevice(options?: Omit<(UseMutationOptions<(DashboardDevice | undefined), DefaultError, Prisma.DashboardDeviceCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DashboardDeviceCreateArgs, DefaultError, DashboardDevice, true>('DashboardDevice', 'POST', `${endpoint}/dashboardDevice/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DashboardDeviceCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DashboardDeviceCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DashboardDevice, Prisma.DashboardDeviceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DashboardDeviceCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DashboardDevice, Prisma.DashboardDeviceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyDashboardDevice(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DashboardDeviceCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DashboardDeviceCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('DashboardDevice', 'POST', `${endpoint}/dashboardDevice/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DashboardDeviceCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DashboardDeviceCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DashboardDeviceCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyDashboardDevice<TArgs extends Prisma.DashboardDeviceFindManyArgs, TQueryFnData = Array<Prisma.DashboardDeviceGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DashboardDeviceFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/findMany`, args, options, fetch);
}

export function useInfiniteFindManyDashboardDevice<TArgs extends Prisma.DashboardDeviceFindManyArgs, TQueryFnData = Array<Prisma.DashboardDeviceGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DashboardDeviceFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/findMany`, args, options, fetch);
}

export function useSuspenseFindManyDashboardDevice<TArgs extends Prisma.DashboardDeviceFindManyArgs, TQueryFnData = Array<Prisma.DashboardDeviceGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DashboardDeviceFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyDashboardDevice<TArgs extends Prisma.DashboardDeviceFindManyArgs, TQueryFnData = Array<Prisma.DashboardDeviceGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DashboardDeviceFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/findMany`, args, options, fetch);
}

export function useFindUniqueDashboardDevice<TArgs extends Prisma.DashboardDeviceFindUniqueArgs, TQueryFnData = Prisma.DashboardDeviceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DashboardDeviceFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueDashboardDevice<TArgs extends Prisma.DashboardDeviceFindUniqueArgs, TQueryFnData = Prisma.DashboardDeviceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DashboardDeviceFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/findUnique`, args, options, fetch);
}

export function useFindFirstDashboardDevice<TArgs extends Prisma.DashboardDeviceFindFirstArgs, TQueryFnData = Prisma.DashboardDeviceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DashboardDeviceFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstDashboardDevice<TArgs extends Prisma.DashboardDeviceFindFirstArgs, TQueryFnData = Prisma.DashboardDeviceGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DashboardDeviceFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/findFirst`, args, options, fetch);
}

export function useUpdateDashboardDevice(options?: Omit<(UseMutationOptions<(DashboardDevice | undefined), DefaultError, Prisma.DashboardDeviceUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DashboardDeviceUpdateArgs, DefaultError, DashboardDevice, true>('DashboardDevice', 'PUT', `${endpoint}/dashboardDevice/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DashboardDeviceUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.DashboardDeviceUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DashboardDevice, Prisma.DashboardDeviceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DashboardDeviceUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DashboardDevice, Prisma.DashboardDeviceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyDashboardDevice(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DashboardDeviceUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DashboardDeviceUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('DashboardDevice', 'PUT', `${endpoint}/dashboardDevice/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DashboardDeviceUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DashboardDeviceUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DashboardDeviceUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertDashboardDevice(options?: Omit<(UseMutationOptions<(DashboardDevice | undefined), DefaultError, Prisma.DashboardDeviceUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DashboardDeviceUpsertArgs, DefaultError, DashboardDevice, true>('DashboardDevice', 'POST', `${endpoint}/dashboardDevice/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DashboardDeviceUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.DashboardDeviceUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DashboardDevice, Prisma.DashboardDeviceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DashboardDeviceUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DashboardDevice, Prisma.DashboardDeviceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteDashboardDevice(options?: Omit<(UseMutationOptions<(DashboardDevice | undefined), DefaultError, Prisma.DashboardDeviceDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DashboardDeviceDeleteArgs, DefaultError, DashboardDevice, true>('DashboardDevice', 'DELETE', `${endpoint}/dashboardDevice/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DashboardDeviceDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.DashboardDeviceDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, DashboardDevice, Prisma.DashboardDeviceGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.DashboardDeviceDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, DashboardDevice, Prisma.DashboardDeviceGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyDashboardDevice(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.DashboardDeviceDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.DashboardDeviceDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('DashboardDevice', 'DELETE', `${endpoint}/dashboardDevice/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.DashboardDeviceDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.DashboardDeviceDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.DashboardDeviceDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateDashboardDevice<TArgs extends Prisma.DashboardDeviceAggregateArgs, TQueryFnData = Prisma.GetDashboardDeviceAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DashboardDeviceAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateDashboardDevice<TArgs extends Prisma.DashboardDeviceAggregateArgs, TQueryFnData = Prisma.GetDashboardDeviceAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.DashboardDeviceAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/aggregate`, args, options, fetch);
}

export function useGroupByDashboardDevice<TArgs extends Prisma.DashboardDeviceGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DashboardDeviceGroupByArgs['orderBy'] } : { orderBy?: Prisma.DashboardDeviceGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DashboardDeviceGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DashboardDeviceGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DashboardDeviceGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DashboardDeviceGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DashboardDeviceGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByDashboardDevice<TArgs extends Prisma.DashboardDeviceGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.DashboardDeviceGroupByArgs['orderBy'] } : { orderBy?: Prisma.DashboardDeviceGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.DashboardDeviceGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.DashboardDeviceGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.DashboardDeviceGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.DashboardDeviceGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.DashboardDeviceGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/groupBy`, args, options, fetch);
}

export function useCountDashboardDevice<TArgs extends Prisma.DashboardDeviceCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DashboardDeviceCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DashboardDeviceCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/count`, args, options, fetch);
}

export function useSuspenseCountDashboardDevice<TArgs extends Prisma.DashboardDeviceCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.DashboardDeviceCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.DashboardDeviceCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('DashboardDevice', `${endpoint}/dashboardDevice/count`, args, options, fetch);
}

export function useCheckDashboardDevice<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; dashboardId?: string; deviceId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('DashboardDevice', `${endpoint}/dashboardDevice/check`, args, options, fetch);
}
